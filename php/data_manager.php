<?php

/**
 * Saves a turn of the conversation to a JSON file.
 *
 * @param string $userId The identifier for the user.
 * @param string $userMessage The message sent by the user.
 * @param string $aiResponse The response generated by the AI.
 * @return bool True on success, false on failure.
 */
function save_conversation_turn($userId, $userMessage, $aiResponse) {
    $dataDir = __DIR__ . '/../data'; // Assumes 'data' directory is at the root, relative to 'php'
    $filename = $dataDir . '/conversation_history_' . preg_replace('/[^a-zA-Z0-9_-]/', '', $userId) . '.json';

    // Ensure the data directory exists and is writable
    if (!is_dir($dataDir)) {
        if (!mkdir($dataDir, 0775, true)) {
            error_log("Failed to create data directory: " . $dataDir);
            return false;
        }
    } elseif (!is_writable($dataDir)) {
        error_log("Data directory is not writable: " . $dataDir);
        return false;
    }
    
    // Ensure the file is writable (or creatable)
    if (file_exists($filename) && !is_writable($filename)) {
        error_log("Conversation history file is not writable: " . $filename);
        return false;
    }


    $conversationTurn = [
        'timestamp' => date('Y-m-d H:i:s'),
        'user' => $userMessage,
        'ai' => $aiResponse,
    ];

    $history = [];
    if (file_exists($filename)) {
        $jsonContent = file_get_contents($filename);
        if ($jsonContent === false) {
            error_log("Failed to read existing conversation history from: " . $filename);
            return false;
        }
        $history = json_decode($jsonContent, true);
        if (json_last_error() !== JSON_ERROR_NONE) {
            // Handle corrupted JSON file, e.g., by starting fresh or logging error
            error_log("Corrupted JSON in conversation history file: " . $filename . ". Error: " . json_last_error_msg());
            $history = []; // Or return false, depending on desired behavior
        }
    }

    $history[] = $conversationTurn;

    if (file_put_contents($filename, json_encode($history, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE)) === false) {
        error_log("Failed to write conversation history to: " . $filename);
        return false;
    }

    return true;
}

?>
